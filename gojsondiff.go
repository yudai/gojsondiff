// Package gojsondiff implements "Diff" that compares two JSON objects and
// generates Deltas that describes differences between them. The package also
// provides "Patch" that apply Deltas to a JSON object.
package gojsondiff

import (
	"sort"
)

// A Diff holds deltas generated by a Differ
type Diff interface {
	// Delta returns a Delta that describe differences between two JSON objects.
	// A nil value will be returned when no difference is found between the JSON objects.
	Delta() Delta
	// Modified returnes true if the Diff has a Delta.
	Modified() bool
}

type diff struct {
	delta Delta
}

// Delta returns a Delta that describe differences between two JSON objects.
// A nil value will be returned when no difference is found between the JSON objects.
func (diff *diff) Delta() Delta {
	return diff.delta
}

// Modified returnes true if the Diff has a Delta.
func (diff *diff) Modified() bool {
	return diff.delta != nil
}

// A Differ conmapres JSON objects to generate a Diff or apply patches.
type Differ struct {
	textDiffMinimumLength int
}

// New returns new Differ with the default configuration.
func New() *Differ {
	return &Differ{
		textDiffMinimumLength: 30,
	}
}

func sortedKeys(m map[string]interface{}) (keys []string) {
	keys = make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	return
}

func sortedKeysInt(m map[int]Delta) (keys []int) {
	keys = make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	sort.Ints(keys)
	return
}

func max(first float64, rest ...float64) (max float64) {
	max = first
	for _, value := range rest {
		if max < value {
			max = value
		}
	}
	return max
}
